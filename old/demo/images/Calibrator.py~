import cv2
import numpy as np
import cPickle as pickle

gobal trackbars
trackbars = False

def nothin(x):
    pass

def createParameters():
    params = {}
    params['H_min'] = 179
    params['H_max'] = 179
    params['S_min'] = 255
    params['S_max'] = 255
    params['V_min'] = 255
    params['V_max'] = 255
    params['Erode'] = 5
    params['Dilate'] = 5
    params['open:1 / close:0'] = 1

    return params

def createTrackbars(params,name='HSV'):
    global trackbars
    trackbars = True
    for k in params.keys():
        cv2.createTrackbar('HSV',k,0,params[k],nothing)
        
def readTrakbars(params,name='HSV'):
    global trackbars
    if trackbars == True:
        for k in params.keys():
            params[k] = cv2.getTrackbarPos(k,name)
    else:
        print('Trackbars not created. First create Trackbars.')
            
    return params

def open_close(mask,kernel,param):
    if param[param.keys()[-1]) == 1:
        mask = cv2.erode(mask,iteration = params['Erode'],kernel = kernel)
        mask = cv2.dilation(mask,iteration = params['Dilate'],kernel = kernel)
    elif param[param.keys()[-1]] == 0:
        mask = cv2.dilation(mask,iteration = params['Dilate'],kernel = kernel)
        mask = cv2.erode(mask,iteration = params['Erode'],kernel = kernel)

    return mask

def toggleMode(mode):
    if mode == 'red':
        mode = 'yellow'
    elif mode == 'yellow':
        mode = 'green'
    elif mode == 'green':
        mode = 'blue'
    elif mode == 'blue':
        mode = 'red'

    return mode

def main():

    # Varibale to represent current colour mode:
    mode = 'red'

    # dictionary to store params for each color
    color_conf = {}
    
    # Creating Trackbars for Calibration.
    createTrackbars()
    
    # creatin camera object
    cap = cv2.VideoCapture(0)

    # Creating kernel element for erosion/dilation
    kernel = cv2.getStructuringElement((5,5),cv2.MORPH_ELLIPSE)
    
    # Infinte Processing Loop
    while True:
        ret, frame = cap.read()

        # converting to hsv for filtering.
        hsv = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)

        # updating values
        params = readTrackbars(params)

        # creating ranges
        lower = np.array(params['H_min'],params['S_min'],params['V_min'])
        upper = np.array(params['H_max'],params['S_max'],params['V_max'])
    
        # filtering image.
        mask = cv2.inRange(hsv,lower,upper)

        # Applying erosion and dilation
        mask = open_close(mask,kernel,params)

        # result
        res = cv2.bitwise_and(img,mask=mask)

        # Adding text to frame to represent current filtering mode.
        cv2.putText(frame,mode,(5,20),cv2.FONT_HERSHEY_COMPLEX,1,\
                    (200,200,200),2)
        
        # Displaing frame, mask and result.
        cv2.imshow('frame',frame)
        cv2.imshow('mask',mask)
        cv2.imshow('result',result)

        k = cv2.waitKey(1)
        if k == 32:
            break
        elif k == ord('t'):
            mode = toggleMode(mode)
        

        
    
